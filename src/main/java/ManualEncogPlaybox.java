package main.java;

import org.encog.engine.network.activation.ActivationSigmoid;
import org.encog.ml.data.MLData;
import org.encog.ml.data.MLDataSet;
import org.encog.ml.data.basic.BasicMLData;
import org.encog.ml.data.basic.BasicMLDataPair;
import org.encog.ml.data.basic.BasicMLDataSet;
import org.encog.ml.data.folded.FoldedDataSet;
import org.encog.ml.train.MLTrain;
import org.encog.neural.networks.BasicNetwork;
import org.encog.neural.networks.layers.BasicLayer;
import org.encog.neural.networks.training.cross.CrossValidationKFold;
import org.encog.neural.networks.training.propagation.resilient.ResilientPropagation;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;


public class ManualEncogPlaybox {
    public final static double MAX_ERROR = 0.40;

    public static void main(String[] args) {
        // Build a random network
        // Train the network with test data
        // Predict a new test data set

        BasicNetwork network = createNetwork(784, 10);

        String[] trainingData = KaggleInputReader.fileAsStringArray("data/train_head.csv", 1000, new ArrayList<Integer>(), false);

//        trainingData = new String[] {
//            "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,226,254,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,137,253,245,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,253,253,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,67,226,253,181,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,253,253,210,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,228,253,253,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,253,253,116,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,238,244,82,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,247,254,188,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,253,254,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,254,254,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,221,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,253,253,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,238,253,253,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,236,253,253,253,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,253,253,253,253,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,240,253,253,253,125,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,202,253,253,253,124,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,253,253,253,67,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,173,224,40,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
//            "8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,29,29,94,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,170,208,254,254,254,244,77,25,92,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,58,205,254,254,254,230,197,249,251,217,255,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,254,254,244,201,82,22,7,125,254,254,242,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,226,254,254,111,0,0,40,203,254,254,199,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,254,254,59,2,17,159,249,254,232,106,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,237,247,78,76,122,225,254,206,112,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,254,254,201,250,254,254,162,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,251,254,254,254,210,45,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,160,254,254,254,218,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,181,254,254,254,254,254,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,239,254,240,99,26,213,254,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,241,252,153,35,0,9,210,254,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,243,254,106,0,0,16,123,254,254,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,254,185,61,135,168,236,254,254,233,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,254,254,254,254,254,254,252,182,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,208,254,254,248,187,187,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,29,29,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
//            "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,217,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,142,253,111,0,165,41,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,253,253,59,0,254,253,253,190,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,253,173,7,0,91,178,227,253,245,119,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,232,253,145,0,0,0,0,147,253,253,253,134,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,253,14,0,0,0,0,8,182,253,253,253,94,0,0,0,0,0,0,0,0,0,0,0,0,0,114,251,225,14,1,0,0,0,0,0,7,173,253,253,248,56,0,0,0,0,0,0,0,0,0,0,0,39,222,253,223,0,0,0,0,0,0,0,0,18,165,232,253,59,0,0,0,0,0,0,0,0,0,0,0,164,253,253,134,0,0,0,0,0,0,0,0,0,0,134,253,59,0,0,0,0,0,0,0,0,0,0,0,165,254,223,44,0,0,0,0,0,0,0,0,0,0,135,255,59,0,0,0,0,0,0,0,0,0,0,50,238,253,55,0,0,0,0,0,0,0,0,0,0,61,233,253,59,0,0,0,0,0,0,0,0,0,0,69,253,253,29,0,0,0,0,0,0,0,0,0,58,227,253,186,21,0,0,0,0,0,0,0,0,0,0,209,253,253,29,0,0,0,0,0,0,0,8,120,238,253,189,8,0,0,0,0,0,0,0,0,0,0,0,209,253,253,29,0,0,0,0,0,0,63,174,253,231,160,14,0,0,0,0,0,0,0,0,0,0,0,0,209,253,253,29,0,0,0,6,30,93,240,253,253,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,253,253,109,0,72,134,156,253,254,253,245,119,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,253,253,249,239,247,253,253,253,255,178,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,185,253,253,253,253,253,218,120,59,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,104,236,235,183,112,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
//        };


        final MLDataSet training = new BasicMLDataSet();
        for (String row : trainingData) {
            double[] actualValue = asOnePerClassCoding(new Double(row.split(",")[0]));
            double[] inputs = inputs(row.split(","));
            prettyPrint(inputs, "input");
            prettyPrint(actualValue, "actual");
            training.add(new BasicMLDataPair(new BasicMLData(inputs), new BasicMLData(actualValue)));
        }

        train(network, training);

        String[] testData = KaggleInputReader.fileAsStringArray("data/train_tail.csv", 1000, new ArrayList<Integer>(), false);
//        testData = new String[] {
//            "2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,111,74,74,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,146,254,255,254,255,228,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,246,254,238,139,104,104,212,231,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,247,254,238,57,0,0,0,85,254,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,254,194,52,0,0,0,0,5,220,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,90,11,0,0,0,0,0,10,224,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,254,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,247,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,126,126,75,30,0,26,237,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,221,233,220,252,243,208,188,248,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,245,54,0,70,195,254,254,245,116,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,184,1,0,7,139,254,249,242,254,227,158,113,75,7,0,0,0,0,0,0,0,0,0,0,0,0,0,105,254,113,161,210,254,167,48,32,105,189,236,254,254,172,74,14,0,0,0,0,0,0,0,0,0,0,0,0,175,237,237,156,130,7,0,0,0,0,9,65,103,218,255,229,158,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,75,159,242,253,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,73,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
//            "8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,135,255,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,253,253,234,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,199,75,132,224,232,227,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,245,253,253,244,85,234,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,186,253,132,132,246,199,253,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,253,183,10,49,55,245,161,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,253,21,0,0,151,242,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,231,187,5,0,71,242,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,253,167,0,34,218,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,233,167,4,182,234,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,235,112,253,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,253,253,216,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,253,253,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,174,253,253,243,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,253,158,71,244,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,200,220,19,0,162,224,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,253,115,0,58,238,253,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,253,137,141,242,253,163,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,235,253,253,253,208,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,233,145,138,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
//        };


        int total = testData.length;
        int correct = 0;
        for (String row : testData) {
            Iteration iterate = iterate(row, network);

            if(iterate.correct()) {
                correct++;
            }

            System.out.println("Actual: " + iterate.getActual() + ", Prediction: " + iterate.getPrediction());
        }

        System.out.println("accuracy: " + new BigDecimal(correct).divide(new BigDecimal(total), 3, RoundingMode.HALF_UP));
    }

    private static Iteration iterate(String testData, BasicNetwork network) {
        double[] inputs = inputs(testData.split(","));
        int prediction = prediction(network, inputs);
        int actual = new Integer(testData.split(",")[0]);
        return new Iteration(new Double(actual), prediction);
    }

    private static double[] inputs(String[] columns) {
        double[] inputs = new double[columns.length-1];
        for (int i = 1; i < columns.length; i++) {
            inputs[i-1] = new Double(columns[i]);
        }

        return inputs;
    }

    private static double[] asOnePerClassCoding(Double label) {
        double[] classes = new double[] { 0,0,0,0,0,0,0,0,0,0 };
        for (int i = 0; i < 10; i++) {
            if(label.intValue() == i) {
                classes[label.intValue()] = 1;
            }

        }
        return classes;
    }

    private static int prediction(BasicNetwork network, double[] input) {
        MLData output = network.compute(new BasicMLData(input));

        prettyPrint(input, "Input");
        prettyPrint(output.getData(), "Output");

        double winningOutput = Double.NEGATIVE_INFINITY;
        int winningClass = Integer.MIN_VALUE;

        for(int i=0;i<output.size();i++)
        {
            // evaluate if this is a "winning" direction
            double thisOutput = output.getData(i);
            if( thisOutput>winningOutput)
            {
                winningOutput = thisOutput;
                winningClass = i;
            }
        }
        return winningClass;
    }

    private static void prettyPrint(double[] input, String label) {
        System.out.print(label + ": ");
        for (double v : input) {
            System.out.print(v + " ");
        }
        System.out.println();
    }

    public static void train(BasicNetwork network, MLDataSet training) {
        final FoldedDataSet folded = new FoldedDataSet(training);
        final MLTrain train = new ResilientPropagation(network, folded);
        final CrossValidationKFold trainFolded = new CrossValidationKFold(train, 4);

        int epoch = 1;

        do {
            trainFolded.iteration();
            System.out
                    .println("Epoch #" + epoch + " Error:" + trainFolded.getError());
            epoch++;
        } while (trainFolded.getError() > MAX_ERROR);
    }

    private static BasicNetwork createNetwork(int numberOfInputFeatures, int numberOfOutputFeatures) {
        BasicNetwork network = new BasicNetwork();
        network.addLayer(new BasicLayer(new ActivationSigmoid(), true, numberOfInputFeatures));
        network.addLayer(new BasicLayer(new ActivationSigmoid(), true, 100));
        network.addLayer(new BasicLayer(new ActivationSigmoid(), true, numberOfOutputFeatures));
        network.getStructure().finalizeStructure();
        network.reset();
        return network;
    }
}