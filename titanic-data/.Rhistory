predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
dim(predictedSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
dim(predictedSpam)
rep("nonspam", dim(testSpam)[1])
predictedSpam <- rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
dim(predictedSpam)
predicatedSpam
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
class(testSpam$type)
testSpam$type
predictedSpam
dim(testSpam)
rep(nonSpam, dim(testSpam)[1])
rep("nonspam", dim(testSpam)[1])
blah = rep("nonspam", dim(testSpam)[1])
blah
dim(blah)
predictionModel$fitted
predictionModel$fitted > 0.5
blah[predictionModel$fitted > 0.5]
blah[predictionModel$fitted > 0.5] = "spam"
blah
dim(blah)
predictionModel$fitted > 0.5
?paste0
paste("mark", "needham")
paste("mark", "needham", sep="")
paste0("mark", "needham")
getwd()
download.file("https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru")
setwd("~/Documents/dataanalysis2/")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./cameras.csv", method="curl")
list.files()
dataDownloaded <- date()
dateDownloaded
dataDownloaded <- date()
dateDownloaded
dateDownloaded <- date()
dateDownloaded
?download.file
read.table("cameras.csv")
read.csv("cameras.csv")
cameras <- read.csv("cameras.csv")
names(cameras)
cameras <- table("cameras.csv")
cameras <- table("cameras.csv")
heads(cameras)
cameras <- read.table("cameras.csv")
head(cameras)
cameras <- read.table("cameras.csv", sep=",", header=TRUE)
head(cameras)
cameras <- read.csv("cameras.csv")
file.choose()
cameras <- read.csv(file.choose())
con <- file("cameras.csv", "r")
read.csv(con)
close(con)
cameras <- read.csv(con)
con <- file("cameras.csv", "r")
cameras <- read.csv(con)
close(con)
cameras
con <- url("http://simplystatistics.org", "r")
simplyStats <- readLines(con)
simplyStats
close(con)
head(simplyStats)
install.packages("RSJSONIO")
install.packages("RJSONIO", repos = "http://www.omegahat.org/R", type = "source")
package(XML)
library(XML)
install.packages("XML")
htmlTreeParse
library(XML)
htmlTreeParse
htmlTreeParse("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl-en", useInternalNodes=T)
html3 <- htmlTreeParse("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl-en", useInternalNodes=T)
xpathSApply(html3, "//title", xmlValue)
fileUrl <- "http://earthquake.usgs.gov/earthquakes/catalog/eqs?day-M1.txt"
download.file(fileUrl, destfile="earthquakeData.csv", method="curl")
fileUrl <- "http://earthquake.usgs.gov/earthquakes/feed/csv/1.0/week"
download.file(fileUrl, destfile="earthquakeData.csv", method="curl")
eData <- read.csv("earthquakeData.csv")
head(eData)
dim(eData)
names(eData)
nrow(eData)
quantile(eData$Lat)
summary(eData)
class(eData)
sapply(eData[1,], class)
unique(eData$Source)
table(eData$Source)
table(eData$Source, eData$Version)
eData[eData$Lat > 0]
eData[eData$Latitude > 0]
eData$Latitude
eData[eData$Latitude > 0, c("Latitude")]
eData[eData$Latitude > 0 & eData$Longitude > 0, c("Latitude", "Longitude")]
cameras
table(names(cameras))
tolower(names(cameras))
strsplit(names(cameras), "\\.")
splitNames <- strsplit(names(cameras), "\\.")
splitNames[5]
splitNames[6]
splitNames[[6]
]
splitNames[[6]]
firstElement <- function(x) { x[1] }
firstElement <- function(x) { x[1] }
apply(splitNames, firstElement)
sapply(splitNames, firstElement)
download.file(fileUrl1, destfile="reviews.csv", method="curl")
download.file(fileUrl2, destfile="solutions.csv", method="curl")
reviews <- read.csv("reviews.csv")
solutions <- read.csv("solutions.csv")
fileUrl2 <- "https://dl.dropbox.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl2, destfile="solutions.csv", method="curl")
solutions <- read.csv("solutions.csv")
head(solution, 2)
head(solutions, 2)
head(solutions, 2)
names(reviews)
reviews <- read.csv("reviews.csv")
download.file(fileUrl1, destfile="reviews.csv", method="curl")
fileUrl1 <- "https://dl.dropbox.com/u/7710864/data/reviews-apr29.csv"
download.file(fileUrl1, destfile="reviews.csv", method="curl")
reviews <- read.csv("reviews.csv")
names(reviews)
sub("_", "", names(reviews),)
gsub("_", "", names(reviews),)
names(reviews) <- gsub("_", "", names(reviews),)
names(reviews)
reviews$timeleft[1:10]
timeRanges <- cut(reviews$timeleft, seq(0, 3600, by=600))
timeRanges
timeRanges[1:10]
table(timeRanges, useNA="ifany")
cut2(reviews$timeleft, g=6)
library(cut2)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
cut2(reviews$timeleft, g=6)
timeRanges <- cut2(reviews$timeleft, g=6)
head(reviews, 2)
reviews$timeRanges <- timeRanges
head(reviews, 2)
mergedData <- merge(reviews, solutions, all=TRUE)
head(mergedData)
?merge
mergedData <- merge(reviews, solutions, by.x="solution_id", by.y="id", all=TRUE)
mergedData <- merge(reviews, solutions, by.x="solutionid", by.y="id", all=TRUE)
head(mergedData)
con <- url("http://simplystatistics.tumblr.com/", "r")
simplyStats <- readLines(con)
close(con)
head(simplyStats)
sapply(simplyStats, nrow)
sapply(simplyStats, nchar)
numberChars[c(2,45,122)]
numberChars <- sapply(simplyStats, nchar)
numberChars[c(2,45,122)]
head(numberChars)
file <- "https://dl.dropbox.com/u/7710864/data/csv_hid/ss06hid.csv"
download.file(file, destfile="americancommunity.csv", method="curl")
acomm <- read.csv("americancommunity.csv")
head(acomm)
names(acomm)
acomm$val
acomm$VAL
acomm$VAL > 1000000
acomm$VAL == 24
length(acomm[acomm$VAL == 24])
length(acomm$VAL[acomm$VAL == 24])
acomm$VAL[acomm$VAL == 24]
acomm$VAL == 24
?length
acomm$VAL == 24
acomm$VAL == 24
greaterMillion <- acomm$VAL == 24
greaterMillion
Filter(greaterMillion, function(x) x== TRUE)
Filter(function(x) x== TRUE, greaterMillion)
length(Filter(function(x) x== TRUE, greaterMillion))
acomm$FES
head(acomm$FES
)
acomm[acomm$RMS == 4]
acomm[acomm$RMS == 4,]
length(acomm[acomm$RMS == 4,])
length(acomm[acomm$RMS == 4 & acomm$BDS == 3,])
acomm[acomm$RMS == 4 & acomm$BDS == 3, c("BDS", "RMS")]
?subset
acomm$RMS == 4
acomm[acomm$RMS == 4 & acomm$BDS == 3, c("BDS", "RMS")]
acomm[acomm$RMS == 4 & !is.na(acomm$RMS) & acomm$BDS == 3, c("BDS", "RMS")]
acomm[acomm$RMS == 4 & !is.na(acomm$RMS) & acomm$BDS == 3 % !is.na(acomm$BDS), c("BDS", "RMS")]
acomm[acomm$RMS == 4 & !is.na(acomm$RMS) & acomm$BDS == 3 & !is.na(acomm$BDS), c("BDS", "RMS")]
threeBedFourTotal <- acomm[acomm$RMS == 4 & !is.na(acomm$RMS) & acomm$BDS == 3 & !is.na(acomm$BDS), c("BDS", "RMS")]
length(threeBedFourTotal)
nrow(threeBedFourTotal)
one <- acomm[acomm$RMS == 4 & !is.na(acomm$RMS) & acomm$BDS == 3 & !is.na(acomm$BDS), c("BDS", "RMS")]
two <- acomm[acomm$RMS == 5 & !is.na(acomm$RMS) & acomm$BDS == 2 & !is.na(acomm$BDS), c("BDS", "RMS")]
three <- acomm[acomm$RMS == 7 & !is.na(acomm$RMS) & acomm$BDS == 2 & !is.na(acomm$BDS), c("BDS", "RMS")]
apply(c(one, two, three), nrow)
apply(nrow, c(one, two, three))
lapply(nrow, c(one, two, three))
lapply(c(one, two, three), nrow)
nrow(one)
nrow(two)
sapply(c(one, two, three), nrow)
sapply(c(one, two, three), count)
sapply(c(one, two, three), length)
sapply(c(one, two, three), nrow)
sapply(c(one, two, three), length)
one <- acomm[acomm$RMS == 4 & !is.na(acomm$RMS) & acomm$BDS == 3 & !is.na(acomm$BDS), c("RMS")]
two <- acomm[acomm$RMS == 5 & !is.na(acomm$RMS) & acomm$BDS == 2 & !is.na(acomm$BDS), c("RMS")]
three <- acomm[acomm$RMS == 7 & !is.na(acomm$RMS) & acomm$BDS == 2 & !is.na(acomm$BDS), c("RMS")]
sapply(c(one, two, three), length)
sapply(c(one, two, three), nrow)
nrow(two)
one
length(one)
two
sapply(c(one, two, three), length)
apply(c(one, two, three), length)
apply(c(one, two, three), 1, length)
apply(c(one, two, three), 2, length)
apply(c(one, two, three), 0, length)
sapply(c(one, two, three), length)
lapply(c(one, two, three), length)
length(two)
length(three)
numberChars[c(2,45,122)]
length(Filter(function(x) x== TRUE, greaterMillion))
length(one)
length(two)
length(three)
acomm[acomm$AGS == 6 & !is.na(acomm$AGS)]
acomm[acomm$AGS == 6 & !is.na(acomm$AGS), ]
acomm[acomm$AGS == 6 & !is.na(acomm$AGS) & acomm$ACR==3 & !is.na(acomm$ACR), ]
farms <- acomm[acomm$AGS == 6 & !is.na(acomm$AGS) & acomm$ACR==3 & !is.na(acomm$ACR), ]
which(farms)
agricultureLogical <- acomm[acomm$AGS == 6 & !is.na(acomm$AGS) & acomm$ACR==3 & !is.na(acomm$ACR), ]
which(agricultureLogical)
?which
acomm[acomm$AGS == 6 & !is.na(acomm$AGS) & acomm$ACR==3 & !is.na(acomm$ACR), ]
acomm$AGS == 6 & !is.na(acomm$AGS) & acomm$ACR==3 & !is.na(acomm$ACR)
agricultureLogical <- acomm$AGS == 6 & !is.na(acomm$AGS) & acomm$ACR==3 & !is.na(acomm$ACR)
which(agricultureLogical)
indexes <- which(agricultureLogical)
subsetDataFrame <- acomm[indexes,]
agricultureLogical <- acomm$AGS == 6 & acomm$ACR==3
indexes <- which(agricultureLogical)
subsetDataFrame <- acomm[indexes,]
which(agricultureLogical)
subsetDataFrame <- acomm[indexes,]
subsetDataFrame$MRGX
is.na(subsetDataFrame$MRGX)]
is.na(subsetDataFrame$MRGX)
which(is.na(subsetDataFrame$MRGX))
subsetDataFrame$MRGC
subsetDataFrame$MRGX
subsetDataFrame$MRGX[is.na(subsetDataFrame$MRGX)]
is.na(c(1, NA, 2))
is.na(subsetDataFrame$MRGX)
which(is.na(subsetDataFrame$MRGX))
is.na(subsetDataFrame$MRGX)
Filter(function(x) x == TRUE, is.na(subsetDataFrame$MRGX))
length(Filter(function(x) x == TRUE, is.na(subsetDataFrame$MRGX)))
is.true
names(acomm)
strsplit(names(cameras), "wgtp")
strsplit(names(acomm), "wgtp")
strsplit(names(acomm), "wgtp")[123]
acomm$YBL
summary(acomm$YBL)
?summary
summary(acomm$YBL, na.rm=TRUE)
summary(acomm$YBL, na.rm=FALSE)
acomm$YBL
download.file(file, destfile="pop.csv", method="curl")
file <- "https://dl.dropbox.com/u/7710864/data/csv_hid/ss06pid.csv"
download.file(file, destfile="pop.csv", method="curl")
read.csv("pop.csv")
download.file(file, destfile="pop.csv", method="curl")
populationData <- read.csv("pop.csv")
head(populationData)
merge(acomm, populationData, by.x="SERIALNO", by.y="SERIALNO")
merged <- merge(acomm, populationData, by.x="SERIALNO", by.y="SERIALNO")
dim(merged)
dim(acomm)
merged2 <- merge(acomm, populationData)
dim(merged2)
merged2
merged <- merge(acomm, populationData, by.x="SERIALNO", by.y="SERIALNO")
head(merged, 1)
housingData <- read.csv("americancommunity.csv")
merged <- merge(housingData, populationData, by.x="SERIALNO", by.y="SERIALNO")
dim(merged)
dim(housingData)
dim(populationData)
?merge
merged <- merge(housingData, populationData, by.x="SERIALNO", by.y="SERIALNO", all=TRUE)
dim(merged)
numberChars[c(2,45,122)]
length(acomm$VAL[acomm$VAL == 24])
length(Filter(function(x) x== TRUE, greaterMillion))
length(one)
length(two)
length(three)
which(agricultureLogical)
length(Filter(function(x) x == TRUE, is.na(subsetDataFrame$MRGX)))
acomm$YBL
unique(acomm$YBL)
summary(acomm$YBL)
summary
?summary
na.rm
acomm$YBL
summary(acomm$YBL, na.rm=T)
summary(acomm$YBL, na.rm=F)
acomm$YBL
acomm$YBL[!is.na(acomm$YBL)]
summary(acomm$YBL[!is.na(acomm$YBL)])
summary(acomm$YBL)
summary(acomm$FES)
unique(acomm$FES)
acomm$FES
class(acomm$FES)
one
two
three
c(one)
c(one, two)
?c
c(one, two, three)
c(one, two, three, recursive=FALSE)
c(one, two, three, recursive=TRUE)
c(one, two, three, recursive=FALSE)
list(one)
list(one, two)
lapply(list(one, two, three), length)
length(one)
length(two)
length(three)
lapply(list(one, two, three), length)
unique(housingData$YBL)
table(housingData$YBL)
one <- acomm[acomm$RMS == 4 & !is.na(acomm$RMS) & acomm$BDS == 3 & !is.na(acomm$BDS), c("RMS")]
one
two <- acomm[acomm$RMS == 5 & !is.na(acomm$RMS) & acomm$BDS == 2 & !is.na(acomm$BDS), c("RMS")]
two
three <- acomm[acomm$RMS == 7 & !is.na(acomm$RMS) & acomm$BDS == 2 & !is.na(acomm$BDS), c("RMS")]
three
class(three)
?c
lapply(c(one, two, three), length)
c(one, two, three)
lapply(c(one, two, three), length)
lapply(c(one, two, three), length)[1:5,]
lapply(c(one, two, three), length)[1:5]
lapply(c(1,2,3), length)
c(1,2,3)
class(c(1,2,3))
lapply(list(one, two, three), length)
power.prop.test()
power.prop.test(p1=0.7, p2=0.75)
power.prop.test(p1=0.7, p2=0.75, power=0.9)
power.prop.test(p1=0.7, p2=0.75, power=0.9, sig.level=0.95)
power.prop.test(p1=0.7, p2=0.75, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.075, power=0.9, sig.level=0.05)
power.prop.test(p1=0.08, p2=0.085, power=0.9, sig.level=0.05)
power.prop.test(p1=0.06, p2=0.065, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.0735, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.073, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.075, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.074, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.0739, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.0738, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.0737, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.0736, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.0735, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.073, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.075, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.074, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.073, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.072, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.075, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.074, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.0745, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.0745, power=0.9, sig.level=0.05)
0.085 / 0.8
0.085 / 0.08
0.07 * 1.0625
power.prop.test(p1=0.07, p2=0.074375, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.075375, power=0.9, sig.level=0.05)
power.prop.test(p1=0.08, p2=0.085, power=0.9, sig.level=0.05)
0.07 * 1.0625
power.prop.test(p1=0.07, p2=0.074375, power=0.9, sig.level=0.05)
0.07* 1.05
power.prop.test(p1=0.07, p2=0.0735, power=0.9, sig.level=0.05)
power.prop.test(p1=0.08, p2=0.085, power=0.9, sig.level=0.05)
power.prop.test(p1=0.08, p2=0.084, power=0.9, sig.level=0.05)
?power.prop.test
power.prop.test(p1=0.08, p2=0.085, power=0.9, sig.level=0.05)
0.07 * 1.0625
power.prop.test(p1=0.07, p2=0.074375, power=0.9, sig.level=0.05)
power.prop.test(p1=0.07, p2=0.074375, power=0.9, sig.level=0.05, alternative="one.sided")
generateConversionRates <- function(sampleSize) {
sample_a 			<- rbinom(seq(0, sampleSize), 1, 0.08)
conversion_a 	<- length(sample_a[sample_a == 1]) / sampleSize
sample_b 			<- rbinom(seq(0, sampleSize), 1, 0.08)
conversion_b 	<- length(sample_b[sample_b == 1]) / sampleSize
c(conversion_a, conversion_b)
}
generateSample <- function(sampleSize) {
lapply(seq(1, 1000), function(x) generateConversionRates(sampleSize))
}
generateSample(100000)
generateConversionRates <- function(sampleSize) {
sample_a 			<- rbinom(seq(0, sampleSize), 1, 0.12)
conversion_a 	<- length(sample_a[sample_a == 1]) / sampleSize
sample_b 			<- rbinom(seq(0, sampleSize), 1, 0.12)
conversion_b 	<- length(sample_b[sample_b == 1]) / sampleSize
c(conversion_a, conversion_b)
}
generateConversionRates(1000)
generateConversionRates(10000)
?rbinom
generateConversionRates(10000)
generateSample <- function(sampleSize) {
lapply(seq(1, 1000), function(x) generateConversionRates(sampleSize))
}
generateSampel(10000)
generateSample(10000)
rbinom(seq(1,10), 1, 0.5)
rbinom(seq(1,10), 1, 0.5)
rbinom(seq(1,10), 1, 0.5)
rbinom(seq(1,10), 1, 0.5)
rbinom(seq(1,10), 1, 0.5)
rbinom(seq(1,10), 1, 0.5)
rbinom(seq(1,10), 1, 0.5)
rbinom(seq(1,10), 1, 0.5)
plot(pData$JWMNP, pData$WAGP, pch=19, col="blue")
getwd()
ls
ls()
file <- "https://dl.dropbox.com/u/7710864/data/csv_hid/ss06pid.csv"
download.file(file, destfile="pop.csv", method="curl")
pData <- read.csv("pop.csv")
plot(pData$JWMNP, pData$WAGP, pch=19, col="blue")
?plot
plot(pData$JWMNP, pData$WAGP, pch=19, col="blue", cex=0.5)
plot(pData$JWMNP, pData$WAGP, pch=19, col=pData$SEX, cex=0.5)
library(Hmisc)
ageGroups <- cut2(pData$AGEP, g=5)
plot(pData$JWMNP, pData$WAGP, pch=19, col=ageGroups, cex=0.5)
x <- rnorm(1e5)
y <- rnorm(1e5)
plot(x,y,pch=19)
sampledValues <- sample(1:1e5, size=1000, replace=FALSE)
plot(x[sampledValues], y[sampledValues], pch=19)
smoothScatter(x,y)
library(hexbin)
install.packages("hexbin")
hbox <- hexbin(x,y)
plot(hbox)
hbox <- hexbin(x,y)
library(hexbin)
hbox <- hexbin(x,y)
plot(hbox)
X <- matrix(rnorm(rnorm(100), nrow=20))
X <- matrix(rnorm(100), nrow=20)
matplot(X, type="b")
plot(pData$JWMNP, pData$WAGP, pch=19, col="blue", cex=0.5, xlab="Travel time (min)", ylab="Last 12 month wages (dollars)")
?Devices
plot(pData$JWMNP, pData$WAGP, pch=19, col="blue", cex=0.5, xlab="Travel time (min)", ylab="Last 12 month wages (dollars)")
dev.copy2pdf(file="blah.pdf")
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
dataFrame <- data.frame(x=x, y=y)
dist(dataFrame)
dist(dataFrame)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
plot(hClustering)
getwd
setwd("~/code/machine-learning/machinenursery/titanic-data/")
titanic <- read.csv("train.csv")
titanic[1:5,]
?cor
cor(titanic$survived, titanic$pclass)
table(titanic$pclass)
plot(titanic$survived$titanic$pclass)
plot(titanic$survived, titanic$pclass, pch=19, col="blue")
plot(titanic$survived, titanic$pclass, pch=19, col="blue")
?plot
plot(titanic$survived, titanic$pclass, pch=19, col="blue")
